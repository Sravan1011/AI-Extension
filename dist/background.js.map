{"version":3,"file":"background.js","mappings":"AACAA,OAAOC,QAAQC,YAAYC,aAAY,KACrCH,OAAOI,QAAQC,MAAMC,IAAI,CAAEC,MAAO,KAAM,KACtCC,QAAQC,IAAI,sBAAsB,GAClC,IAeJT,OAAOC,QAAQS,UAAUP,aAAY,CAACQ,EAASC,EAAQC,KACrD,GAAqB,gBAAjBF,EAAQG,KAAwB,CAClC,MAAMC,EAAOJ,EAAQI,KAGrB,GAAIA,EAAKC,cAAe,CACtB,MAAMC,EAAgB,IAAIC,KAAKH,EAAKC,eAAeG,UACnDnB,OAAOoB,OAAOC,OAAO,QAAQN,EAAKO,KAAM,CACtCC,KAAMN,GAEV,CAEAJ,EAAa,CAAEW,SAAS,GAC1B,CACA,OAAO,CAAI,IAIbxB,OAAOoB,OAAOK,QAAQtB,aAAauB,IACjC,GAAIA,EAAMC,KAAKC,WAAW,SAAU,CAClC,MAAMC,EAASH,EAAMC,KAAKG,MAAM,KAAK,GAGrC9B,OAAOI,QAAQC,MAAM0B,IAAI,CAAC,UAAWC,IACnC,MACMjB,GADQiB,EAAOzB,OAAS,IACX0B,MAAKC,GAAKA,EAAEZ,GAAGa,aAAeN,IAE7Cd,GAtCV,SAA4BA,GAC1Bf,OAAOoC,cAAcf,OAAO,GAAI,CAC9BP,KAAM,QACNuB,QAAS,mBACTC,MAAO,WACPC,QAASxB,EAAKuB,MACdE,SAA4B,SAAlBzB,EAAKyB,SAAsB,EAAI,GAE7C,CA+BQC,CAAmB1B,EACrB,GAEJ","sources":["webpack://ai-task-scheduler/./src/background.js"],"sourcesContent":["// Initialize storage when extension is installed\r\nchrome.runtime.onInstalled.addListener(() => {\r\n  chrome.storage.local.set({ tasks: [] }, () => {\r\n    console.log('Storage initialized');\r\n  });\r\n});\r\n\r\n// Create a notification\r\nfunction createNotification(task) {\r\n  chrome.notifications.create('', {\r\n    type: 'basic',\r\n    iconUrl: 'icons/icon48.png',\r\n    title: 'Task Due',\r\n    message: task.title,\r\n    priority: task.priority === 'High' ? 2 : 1\r\n  });\r\n}\r\n\r\n// Handle task creation\r\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n  if (request.type === 'CREATE_TASK') {\r\n    const task = request.task;\r\n    \r\n    // If task has a due date, create an alarm\r\n    if (task.scheduledDate) {\r\n      const scheduledTime = new Date(task.scheduledDate).getTime();\r\n      chrome.alarms.create(`task-${task.id}`, {\r\n        when: scheduledTime\r\n      });\r\n    }\r\n    \r\n    sendResponse({ success: true });\r\n  }\r\n  return true;\r\n});\r\n\r\n// Handle alarms\r\nchrome.alarms.onAlarm.addListener((alarm) => {\r\n  if (alarm.name.startsWith('task-')) {\r\n    const taskId = alarm.name.split('-')[1];\r\n    \r\n    // Get task details from storage\r\n    chrome.storage.local.get(['tasks'], (result) => {\r\n      const tasks = result.tasks || [];\r\n      const task = tasks.find(t => t.id.toString() === taskId);\r\n      \r\n      if (task) {\r\n        createNotification(task);\r\n      }\r\n    });\r\n  }\r\n});"],"names":["chrome","runtime","onInstalled","addListener","storage","local","set","tasks","console","log","onMessage","request","sender","sendResponse","type","task","scheduledDate","scheduledTime","Date","getTime","alarms","create","id","when","success","onAlarm","alarm","name","startsWith","taskId","split","get","result","find","t","toString","notifications","iconUrl","title","message","priority","createNotification"],"sourceRoot":""}